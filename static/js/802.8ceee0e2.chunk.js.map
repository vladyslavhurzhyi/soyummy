{"version":3,"file":"static/js/802.8ceee0e2.chunk.js","mappings":"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","sources":["components/MainPageTitle/MainPageTitle.jsx","components/AddRecipe/ResipeDescriptionFields.jsx","components/AddRecipe/RecipeIngredientsFields.jsx","components/AddRecipe/RecipeMethodFields.jsx","redux/ingredients/ingredientsSelectors.js","components/AddRecipe/AddRecipeForm.jsx","components/PopularRecipes/PopularRecipes.jsx","pages/AddRecipe.jsx","redux/categories/categoriesSelectors.js","redux/recipes/recipesSelectors.js"],"sourcesContent":["import { motion } from 'framer-motion';\n\n// possible className:\n// main-title\n// main-title-accent\n// main-title-empty\n\nexport const MainPageTitle = ({ pageTitle, className }) => {\n  const isVisible = className.includes('accent') ? true : false;\n\n  return (\n    <div className=\"relative\">\n      {!isVisible && (\n        <div>\n          <motion.div\n            initial={{\n              opacity: 0,\n            }}\n            viewport={{ once: true }}\n            transition={{ duration: 1, delay: 0.5 }}\n            whileInView={{\n              opacity: 1,\n            }}\n            className=\"\n          absolute \n          bg-accentMain \n          rounded-[3px] \n          rotate-[-25deg] \n          w-2 md:w-3.5 \n          h-2 md:h-3.5 \n          top-[76px] \n          left-[104px] \n          md:top-[85px] \n          md:left-[187px] \n          xl:top-[116px] \n          xl:left-[228px] \n          size\n          \"\n          ></motion.div>\n          <motion.div\n            initial={{\n              opacity: 0,\n            }}\n            viewport={{ once: true }}\n            transition={{ duration: 1, delay: 1.5 }}\n            whileInView={{\n              opacity: 1,\n            }}\n            className=\"\n          absolute \n          bg-accentDark \n          dark:bg-whiteText\n\n          rounded-[3px] \n          rotate-[-25deg] \n          w-1.5 md:w-3 \n          h-1.5 md:h-3 \n          top-[142px] \n          left-[231px] \n          md:top-[155px] \n          md:left-[405px] \n          lg:top-[155px] \n          lg:left-[437px] \n          xl:top-[199px] \n          xl:left-[707px] \n          size animate-pulse\"\n          ></motion.div>\n          <motion.div\n            initial={{\n              opacity: 0,\n            }}\n            viewport={{ once: true }}\n            transition={{ duration: 1, delay: 2 }}\n            whileInView={{\n              opacity: 1,\n            }}\n            className=\"\n          absolute \n          bg-accentMain \n          rounded-[3px] \n          rotate-[-25deg] \n          opacity-90 \n          w-2 md:w-3.5 \n          h-2 md:h-3.5\n          top-[109px] \n          right-[0px]  \n          md:top-[98px] \n          xl:top-[129px] \n          xl:left-[1250px] \n         bg-gradient-to-r from-white to-white via-accentMain animate-gradient-x\n          xl:right-[71px] \n          size\"\n          ></motion.div>\n        </div>\n      )}\n      <h1 className={className}>{pageTitle}</h1>\n    </div>\n  );\n};\n","// import { useState } from 'react';\n// import { Uploader } from 'uploader';\n// import { UploadButton } from 'react-uploader';\n// import categories from '../../data/category.json';\nimport timeList from '../../data/time.json';\n\nexport const ResipeDescriptionFields = ({\n  data,\n  categories,\n  updateData,\n  updateImg,\n  previewImg,\n}) => {\n  // const [images, setImages] = useState([]);\n  // const [url, setUrl] = useState('');\n\n  // console.log(images);\n\n  // const handleFieldChange = e => {\n  //   const { id, value } = e.target;\n  //   let _formData = { ...data };\n  //   // _formData[id] = id === 'isPublic' ? !_formData.isPublic : value;\n  //   _formData[id] = value;\n\n  //   setData(_formData);\n  //   // setImgUrl(url);\n  // };\n\n  // const uploader = Uploader({ apiKey: 'free' });\n  // const uploaderOptions = {\n  //   multi: false,\n  //   styles: {\n  //     colors: {\n  //       primary: '#8BAA36',\n  //     },\n  //   },\n  // };\n\n  // const MyUploadButton = ({ setImages }) => (\n  //   <UploadButton\n  //     uploader={uploader}\n  //     options={uploaderOptions}\n  //     onComplete={setImages}\n  //   >\n  //     {({ onClick }) => (\n  //       <button\n  //         onClick={onClick}\n  //         className=\"border-dashed border-2 rounded-xl border-accentGray text-zinc-50 py-3 px-2 flex flex-col items-center hover:border-accentLighter  focus:border-accentLighter  hover:text-accentLighter  focus:text-accentLighter\"\n  //       >\n  //         <svg\n  //           xmlns=\"http://www.w3.org/2000/svg\"\n  //           viewBox=\"0 0 24 24\"\n  //           className=\"fill-transparent hover:fill-accentGray focus:fill-accentGray hover:stroke-accentMain focus:stroke-accentMain stroke-accentGray w-12 h-12 stroke-1\"\n  //         >\n  //           <path\n  //             strokeLinecap=\"round\"\n  //             strokeLinejoin=\"round\"\n  //             d=\"M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.774 48.774 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z\"\n  //           />\n  //           <path\n  //             strokeLinecap=\"round\"\n  //             strokeLinejoin=\"round\"\n  //             d=\"M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z\"\n  //           />\n  //         </svg>\n  //         upload image\n  //       </button>\n  //     )}\n  //   </UploadButton>\n  // );\n\n  // const MyUploadedImages = ({ images }) =>\n  //   images.map(img => {\n  //     // Tip: save 'filePath' to your DB (not 'fileUrl').\n  //     const filePath = img.filePath;\n  //     const fileUrl = uploader.url(filePath, 'thumbnail'); // \"raw\" for un-transformed file.\n  //     // setUrl(fileUrl);\n  //     // console.log(url);\n  //     return (\n  //       <img\n  //         key={fileUrl}\n  //         src={fileUrl}\n  //         alt=\"recipe poster\"\n  //         className=\"block w-full h-full object-cover\"\n  //       ></img>\n  //     );\n  //   });\n\n  return (\n    <div className=\"flex flex-col md:flex-row\">\n      <div className=\"w-[280px] h-[280px] mx-auto mb-8 xl:w-[360px] xl:h-[360px] md:mx-0 md:mb-o md:mr-8 bg-accentMain rounded-lg flex justify-center items-center\">\n        {/* {images.length ? (\n          <MyUploadedImages images={images} />\n        ) : (\n          <MyUploadButton setImages={setImages} />\n        )} */}\n        <label htmlFor=\"thumb\" className=\"block w-full h-full object-cover \">\n          <img\n            src={previewImg}\n            alt=\"recipe poster\"\n            className=\"block w-full h-full object-cover rounded-lg \"\n          />\n          <input\n            className=\"hidden\"\n            type=\"file\"\n            id=\"thumb\"\n            name=\"thumb\"\n            onChange={updateImg}\n            accept=\"image/png, image/jpg, image/jpeg\"\n          />\n        </label>\n      </div>\n      <div className=\" flex flex-col md:w-[400px] mt-2\">\n        <div className=\"relative z-0 w-full mb-6\">\n          <input\n            type=\"text\"\n            name=\"title\"\n            placeholder=\" \"\n            autoComplete=\"off\"\n            id=\"title\"\n            required\n            className=\"pt-3 pb-2 pl-2 block w-full px-0 mt-0 bg-transparent border-0 border-b-2 appearance-none focus:outline-none focus:ring-0 focus:border-accentMain border-gray-200 dark:text-whiteText dark:border-gray-500 dark:focus:border-accentMain\"\n            value={data.title}\n            onChange={updateData}\n          />\n          <label\n            htmlFor=\"title\"\n            className=\"absolute duration-300 top-3 -z-1 origin-0 text-gray-500 font-main font-normal text-customXs md:text-customSm dark:text-whiteText\"\n          >\n            Enter Recipe Title\n          </label>\n          {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">Title is required</span> */}\n        </div>\n        <div className=\"relative z-0 w-full \">\n          <input\n            type=\"text\"\n            name=\"description\"\n            placeholder=\" \"\n            autoComplete=\"off\"\n            id=\"description\"\n            required\n            className=\"pt-3 pb-2 pl-2 block w-full px-0 mt-0 bg-transparent border-0 border-b-2 appearance-none focus:outline-none focus:ring-0 focus:border-accentMain border-gray-200  dark:text-whiteText dark:border-gray-500 dark:focus:border-accentMain\"\n            value={data.description}\n            onChange={updateData}\n          />\n          <label\n            htmlFor=\"description\"\n            className=\"absolute duration-300 top-3 -z-1 origin-0 text-gray-500 font-main font-normal text-customXs md:text-customSm dark:text-whiteText\"\n          >\n            Enter adout recipe\n          </label>\n          {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">\n          Description is required\n          </span> */}\n        </div>\n        <div className=\"flex flex-row space-x-4 my-6\">\n          <div className=\"relative z-0 w-full \">\n            <select\n              name=\"category\"\n              id=\"category\"\n              required\n              value={data.category}\n              onChange={updateData}\n              className=\"pt-3 pb-2 block w-full px-0 mt-0 bg-transparent border-0 border-b-2 appearance-none z-1 focus:outline-none focus:ring-0 focus:border-accentMain border-gray-200  dark:text-whiteText dark:border-gray-500 dark:focus:border-accentMain\"\n            >\n              <option value=\"\" disabled hidden></option>\n              {categories.map(({ _id, category }) => (\n                <option\n                  key={_id}\n                  value={_id}\n                  className=\"bg-lime-50 text-center dark:bg-accentMain\"\n                >\n                  {category}\n                </option>\n              ))}\n            </select>\n            <label\n              htmlFor=\"category\"\n              className=\"absolute duration-300 top-3 -z-1 origin-0  text-gray-500 font-main font-normal text-customXs md:text-customSm dark:text-whiteText\"\n            >\n              Category\n            </label>\n            {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">\n            Category has to be selected\n          </span> */}\n          </div>\n          <div className=\"relative z-0 w-full \">\n            <select\n              name=\"time\"\n              id=\"time\"\n              required\n              value={data.time}\n              onChange={updateData}\n              className=\"pt-3 pb-2 block w-full px-0 mt-0 bg-transparent border-0 border-b-2 appearance-none z-1 focus:outline-none focus:ring-0 focus:border-accentMain border-gray-200 dark:text-whiteText dark:border-gray-500 dark:focus:border-accentMain\"\n            >\n              <option value=\"\" disabled hidden></option>\n              {timeList.map(({ time }) => (\n                <option\n                  key={time}\n                  value={time}\n                  className=\"bg-lime-50 text-center dark:bg-accentMain\"\n                >\n                  {time}\n                </option>\n              ))}\n            </select>\n            <label\n              htmlFor=\"time\"\n              className=\"absolute duration-300 top-3 -z-1 origin-0  text-gray-500 font-main font-normal text-customXs md:text-customSm dark:text-whiteText\"\n            >\n              Cooking time\n            </label>\n            {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">\n            Time has to be selected\n          </span> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// ('use strict');\n\n// document.getElementById('button').addEventListener('click', toggleError);\n// const errMessages = document.querySelectorAll('#error');\n\n// function toggleError() {\n//   // Show error message\n//   errMessages.forEach(el => {\n//     el.classList.toggle('hidden');\n//   });\n\n//   // Highlight input and label with red\n//   const allBorders = document.querySelectorAll('.border-gray-200');\n//   const allTexts = document.querySelectorAll('.text-gray-500');\n//   allBorders.forEach(el => {\n//     el.classList.toggle('border-red-600');\n//   });\n//   allTexts.forEach(el => {\n//     el.classList.toggle('text-red-600');\n//   });\n// }\n","import { useState } from 'react';\nimport { Logo } from '../Logo/Logo';\nimport { CurveBtn } from 'components/CurveBtn/CurveBtn';\nimport measureList from '../../data/measure.json';\n// import categories from '../../data/category.json';\n\nexport const ResipeIngredientsFields = ({\n  items,\n  updateItems,\n  removeItem,\n  ingredients,\n}) => {\n  const [matchingIngr, setMatchingIngr] = useState([]);\n  const [ingredientName, setIngredientName] = useState('');\n  const [current, setCurrent] = useState('');\n  const [currentAmount, setCurrentAmount] = useState('1');\n  const [currentMeasure, setCurrentMeasure] = useState('pcs');\n\n  // const handleAddClick = e => {\n  //   e.preventDefault();\n  //   const _items = [...items];\n  //   _items.push({\n  //     id: '',\n  //     amount: '0',\n  //     measure: 'pcs',\n  //   });\n  //   setItems(_items);\n  // };\n  const handleFieldChange = ({ target: { value, dataset } }) => {\n    // const finedItem = items.find(it => it.id === id);\n    // finedItem[dataset.name] = value;\n    // console.log(items);\n    // updateItems(items);\n\n    if (dataset.name === 'amount') {\n      setCurrentAmount(value);\n    }\n    if (dataset.name === 'measure') {\n      setCurrentMeasure(value);\n    }\n  };\n\n  const onInput = ({ target: { value } }) => {\n    const currentValue = value.trim();\n    setIngredientName(currentValue);\n    const matchIngredients = ingredients.filter(it => {\n      return it.ttl?.toLowerCase().includes(currentValue.toLowerCase());\n    });\n    setMatchingIngr(matchIngredients);\n  };\n\n  const chooseItem = (ttl, _id) => {\n    setCurrent(_id);\n    setIngredientName(ttl);\n    setMatchingIngr([]);\n    // const newIgredient = {\n    //   ttl: ttl,\n    //   id: _id,\n    //   amount: '1',\n    //   measure: 'pcs',\n    // };\n    // items.push(newIgredient);\n    // updateItems(items);\n  };\n\n  // const showTitle = id => {\n  //   console.log(id);\n  //   const currentIng = ingredients.find(({ _id }) => _id === id);\n  //   if (currentIng) {\n  //     return currentIng.ttl;\n  //   }\n  //   if (ingredientName) {\n  //     return ingredientName;\n  //   }\n\n  // };\n\n  const newIngredientField = () => {\n    const newIgredient = {\n      ttl: ingredientName,\n      id: current,\n      amount: currentAmount,\n      measure: currentMeasure,\n    };\n\n    updateItems([...items, newIgredient]);\n\n    setIngredientName(' ');\n    setCurrent('');\n    setCurrentAmount('1');\n    setCurrentMeasure('pcs');\n  };\n\n  //   const savedIngredients = (items) => {\n  //   const\n  // }\n\n  // const handleRemoveClick = id => {\n  //   const _items = items.filter(item => item.id !== id);\n  //   setItems([..._items]);\n  // };\n\n  // const handleFieldChange = (event, id) => {\n  //   const _items = [...items];\n  //   const index = _items.findIndex(item => item.id === id);\n  //   const {\n  //     value,\n  //     dataset: { name },\n  //   } = event.target;\n  //   _items[index][name] = value;\n  //   setItems(_items);\n  // };\n  return (\n    <div className=\"my-11 md:my-24\">\n      <h2 className=\"mb-6 md:mb-9 font-main font-semibold text-secondaryText text-customBase dark:text-whiteText\">\n        Ingredients\n      </h2>\n      {/* {items.map(item => {\n        return ( */}\n      <div key={current} className=\"flex mb-4 md:mb-6\">\n        <div className=\"relative z-0 w-1/2 \">\n          <input\n            type=\"text\"\n            name=\"ingredient\"\n            placeholder=\" \"\n            // data-name=\"id\"\n            autoComplete=\"off\"\n            required\n            className=\"pt-3 pb-2 pl-2 block w-full px-0 mt-0 bg-transparent border-0 border-b-2 appearance-none focus:outline-none focus:ring-0 focus:border-accentMain border-gray-200  dark:text-whiteText dark:border-gray-500 dark:focus:border-accentMain\"\n            value={ingredientName}\n            onInput={onInput}\n          />\n          <ul className=\"list-none\">\n            {matchingIngr.length > 1 &&\n              matchingIngr.map(({ ttl, _id }) => (\n                <li\n                  key={_id}\n                  value={_id}\n                  // onClick={() => handleIngredient(, item.id)}\n                  onClick={() => chooseItem(ttl, _id)}\n                  className=\"bg-lime-50 dark:bg-accentMain\"\n                >\n                  {ttl}\n                </li>\n              ))}\n          </ul>\n          <label\n            htmlFor=\"ingredient\"\n            className=\"absolute duration-300 top-3 -z-1 origin-0 text-gray-500 font-main font-normal text-customXs md:text-customSm dark:text-whiteText\"\n          >\n            Choose ingredient\n          </label>\n        </div>\n        {/* <select\n              name=\"name\"\n              data-name=\"id\"\n              value={item.id}\n              onChange={e => handleFieldChange(e, item.id)}\n              className=\"pt-2 pb-1 md:pt-3 md:pb-2 pl-2 md:pl-4 block w-48 md:w-96 lg:w-[600px] px-0 mr-3.5 md:mr-8 text-sm md:text-base bg-accentGray rounded-lg  border-0 border-b-2 appearance-none z-1 focus:outline-none focus:ring-0 focus:border-accentMain border-transparent  dark:text-whiteText dark:bg-accentDarker dark:border-2 dark:border-gray-500 dark:focus:border-accentMain\"\n            >\n              {ingredients.map(({ ttl, _id }) => (\n                <option\n                  key={_id}\n                  value={_id}\n                  className=\"bg-lime-50 dark:bg-accentMain\"\n                >\n                  {ttl}\n                </option>\n              ))}\n            </select> */}\n        <div className=\"relative z-0 w-14 mr-1 md:mr-2\">\n          <input\n            type=\"number\"\n            name=\"amount\"\n            data-name=\"amount\"\n            placeholder=\" \"\n            step=\"0.5\"\n            min=\"0.5\"\n            required\n            className=\"pt-2 pb-1 md:pt-3 md:pb-2 pl-3 block w-full px-0 text-sm md:text-base bg-accentGray rounded-lg border-0 border-b-2 appearance-none focus:outline-none focus:ring-0 focus:border-accentMain border-transparent  dark:text-whiteText dark:bg-accentDarker dark:border-2 dark:border-gray-500 dark:focus:border-accentMain\"\n            value={currentAmount}\n            onChange={e => handleFieldChange(e, current)}\n          />\n          <label\n            htmlFor=\"amount\"\n            className=\"absolute duration-300 top-2 -z-1 origin-0 text-gray-500 font-main font-normal text-customXs md:text-customSm dark:text-gray-500\"\n          >\n            amount\n          </label>\n          {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">Title is required</span> */}\n        </div>\n        <div className=\"relative z-0 w-20 \">\n          <select\n            name=\"measure\"\n            data-name=\"measure\"\n            value={currentMeasure}\n            onChange={e => handleFieldChange(e, current)}\n            className=\"pt-2 pb-1 md:pt-3 md:pb-2 pl-3 block w-full px-0 mt-0 text-sm md:text-base bg-accentGray rounded-lg  border-0 border-b-2 appearance-none z-1 focus:outline-none focus:ring-0 focus:border-accentMain border-transparent  dark:text-whiteText dark:bg-accentDarker dark:border-2 dark:border-gray-500 dark:focus:border-accentMain\"\n          >\n            {measureList.map(({ type }) => (\n              <option\n                key={type}\n                value={type}\n                className=\"bg-lime-50 dark:bg-accentMain\"\n              >\n                {type}\n              </option>\n            ))}\n          </select>\n          <label\n            htmlFor=\"measure\"\n            className=\"absolute duration-300 top-2 -z-1 origin-0  text-gray-500 font-main font-normal text-customXs md:text-customSm  dark:text-gray-500\"\n          >\n            measure\n          </label>\n          {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">\n      Category has to be selected\n    </span> */}\n        </div>\n        {/* {items.length > 1 && ( */}\n        {/* <button\n          type=\"button\"\n          className=\"flex ml-1 md:ml-3 lg:ml-5 \"\n          // onClick={() => removeItem(item.id)}\n        >\n          <Logo\n            trash=\"true\"\n            cssClassIcon=\"iconTrash\"\n            cssClassDiv=\"divIconTrash\"\n          />\n        </button> */}\n        {/* )} */}\n      </div>\n      {/* );\n      })} */}\n\n      <CurveBtn\n        text=\"add ingredient\"\n        cssClass=\"othercateg-btn dark:bg-accentDarker dark:text-accentMain  dark:hover:text-accentLighter dark:hover:border-accentLighter dark:focus:ring\"\n        onClick={newIngredientField}\n      />\n      <ul>\n        {items.length >= 1 &&\n          items.map(({ ttl, id, amount, measure }) => (\n            <li\n              key={id}\n              // value={_id}\n              // onClick={() => handleIngredient(, item.id)}\n              // onClick={() => chooseItem(ttl, _id, item.id)}\n              className=\"m-2 flex bg-lime-50 dark:bg-accentMain\"\n            >\n              <p>{ttl}____</p>\n              <p>{amount}_____</p>\n              <p>{measure}</p>\n              <button\n                type=\"button\"\n                className=\"flex ml-1 md:ml-3 lg:ml-5 \"\n                onClick={() => removeItem(id)}\n              >\n                <Logo\n                  trash=\"true\"\n                  cssClassIcon=\"iconTrash\"\n                  cssClassDiv=\"divIconTrash\"\n                />\n              </button>\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","export const ResipeMethodFields = ({ data, updateData }) => {\n  // const [method, setMethod] = useState('');\n  // console.log(data);\n  // const handleFieldChange = e => {\n  //   const { id, value } = e.target;\n  //   let _recipe = { ...data };\n  //   _recipe[id] = id === 'isPublic' ? !_recipe.isPublic : value;\n  //   setData(_recipe);\n  // };\n\n  return (\n    <div className=\"w-full \">\n      <label\n        htmlFor=\"method\"\n        className=\"font-main font-semibold text-secondaryText text-customBase dark:text-whiteText\"\n      >\n        Recipe Preparation\n      </label>\n      <textarea\n        name=\"method\"\n        value={data.instructions}\n        id=\"instructions\"\n        required\n        placeholder=\"Enter recipe method\"\n        onChange={updateData}\n        className=\"p-3 block w-full h-40 my-[18px] md:my-[32px] md:w-2/3 lg:w-1/2 rounded-lg bg-accentGray border-0 border-b-2 appearance-none  focus:outline-none focus:ring-0 focus:border-accentMain border-transparent dark:text-whiteText dark:bg-accentDarker dark:border-2 dark:border-gray-500 dark:focus:border-accentMain\"\n      ></textarea>\n      <label className=\"text-gray-500 text-customXs md:text-customSm \">\n        <input\n          type=\"checkbox\"\n          id=\"isPublic\"\n          value={data.isPublic}\n          onChange={updateData}\n          className=\"appearance-none \"\n        />{' '}\n        add to the public recipe database SoYummy\n      </label>\n      {/* <span className=\"text-sm text-red-600 hidden\" id=\"error\">\n            Category has to be selected\n          </span> */}\n    </div>\n  );\n};\n","export const selectIngredients = state => state.ingredients.items;\nexport const selectIngrIsLoading = state => state.ingredients.isLoading;\nexport const selectIngrError = state => state.ingredients.error;\n","// import { nanoid } from 'nanoid';\nimport { useState, useEffect } from 'react';\nimport { ResipeDescriptionFields } from './ResipeDescriptionFields';\nimport { ResipeIngredientsFields } from './RecipeIngredientsFields';\nimport { ResipeMethodFields } from './RecipeMethodFields';\nimport { CurveBtn } from 'components/CurveBtn/CurveBtn';\nimport { FollowUs } from 'components/FollowUs/FollowUs';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useNavigate } from 'react-router-dom';\nimport { addRecipe } from 'redux/recipes/recipesOperations';\nimport { getIngredients } from 'redux/ingredients/ingredientsOperations';\nimport { selectIngredients } from 'redux/ingredients/ingredientsSelectors';\nimport { getCategories } from 'redux/categories/categoriesOperations';\nimport { selectCategories } from 'redux/categories/categoriesSelectors';\n\nconst IMG_PREVIEW = 'https://placehold.co/357x344?text=Upload+image';\n\nconst initialRecipe = {\n  title: '',\n  description: '',\n  category: '',\n  time: '',\n  ingredients: [],\n  isPublic: false,\n  instructions: '',\n};\nexport const AddRecipeForm = () => {\n  const ingredientsList = useSelector(selectIngredients);\n  const categoriesList = useSelector(selectCategories);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  // useEffect(() => {\n  //   if (ingredientsList.length !== 0) {\n  //     initialRecipe.ingredients.push(initialIgredient);\n  //   }\n  // }, [ingredientsList, initialIgredient, initialRecipe.ingredients]);\n\n  useEffect(() => {\n    dispatch(getIngredients());\n    dispatch(getCategories());\n  }, [dispatch]);\n\n  // const [formData, setFormData] = useState({\n  //   title: '',\n  //   description: '',\n  //   category: '',\n  //   time: '',\n  //   ingredients: [\n  //     {\n  //       id: '',\n  //       amount: '0',\n  //       measure: 'pcs',\n  //     },\n  //   ],\n  //   thumb: '',\n  //   isPublic: false,\n  //   instructions: '',\n  // });\n\n  // const handleFieldsChange = fields => {\n  //   let _formData = { ...formData, ...fields };\n  //   setFormData(_formData);\n  // };\n\n  // const handleIngredientsChange = ingredients => {\n  //   let _formData = { ...formData, ingredients };\n  //   setFormData(_formData);\n  //   console.log(formData);\n  // };\n\n  // const handleSubmit = e => {\n  //   e.preventDefault();\n  //   // simple validation..\n  //   const { title, description, category, time, ingredients, instructions } =\n  //     formData;\n\n  //   if (\n  //     !title ||\n  //     !description ||\n  //     !category ||\n  //     !time ||\n  //     ingredients.length === 0 ||\n  //     !instructions\n  //   ) {\n  //     alert('Please, provide all required fields');\n  //   }\n\n  //   console.log(formData);\n  //   console.table(formData.ingredients);\n\n  //   dispatch(addRecipe(formData));\n  //   navigate(`/my`);\n  // };\n  const [preview, setPreview] = useState(IMG_PREVIEW);\n  const [recipe, setRecipe] = useState({ ...initialRecipe });\n  // const [isSubmitting, setIsSubmitting] = useState(false);\n\n  const handleFileChange = e => {\n    const [_file] = e.target.files;\n    setPreview(_file ? URL.createObjectURL(_file) : IMG_PREVIEW);\n  };\n\n  const handleFieldChange = e => {\n    const { id, value } = e.target;\n    let _recipe = { ...recipe };\n    _recipe[id] = id === 'isPublic' ? !_recipe.isPublic : value;\n    setRecipe(_recipe);\n  };\n\n  const handleIngredientsChange = ingredients => {\n    setRecipe({ ...recipe, ingredients });\n  };\n\n  const handleRemoveIngredient = id => {\n    const _ingredients = recipe.ingredients.filter(item => item.id !== id);\n    handleIngredientsChange(_ingredients);\n  };\n\n  const sendForm = async (form, formData) => {\n    // setIsSubmitting(true);\n    dispatch(addRecipe(formData));\n    navigate(`/my`);\n    resetForm(form);\n    // try {\n    //   const { data } = await API.post(\"/recipes\", formData);\n    //   resetForm(form);\n    //   console.log(data);\n    // } catch (err) {\n    //   alert(err.response.data.message);\n    // } finally {\n    //   setIsSubmitting(false);\n    // }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    // some validations !isValid(recipe)...\n    const formData = new FormData();\n    const [file] = e.target.thumb.files;\n    if (!file) {\n      return alert('Select a recipe image!');\n    }\n    formData.append('thumb', file);\n    const formattedRecipe = {\n      ...recipe,\n      ingredients: recipe.ingredients.map(({ id, amount, measure }) => ({\n        id,\n        amount,\n        measure,\n      })),\n    };\n    formData.append('jsonData', JSON.stringify(formattedRecipe));\n    sendForm(e.target, formData);\n  };\n\n  const resetForm = form => {\n    form.reset();\n    setRecipe({\n      ...initialRecipe,\n      ingredients: [],\n    });\n    setPreview(IMG_PREVIEW);\n  };\n  return (\n    <>\n      <div className=\"relative\">\n        <form noValidate=\"\" onSubmit={handleSubmit}>\n          <ResipeDescriptionFields\n            data={recipe}\n            categories={categoriesList}\n            updateData={handleFieldChange}\n            updateImg={handleFileChange}\n            previewImg={preview}\n          />\n          <ResipeIngredientsFields\n            ingredients={ingredientsList}\n            items={recipe.ingredients}\n            updateItems={handleIngredientsChange}\n            removeItem={handleRemoveIngredient}\n          />\n          <ResipeMethodFields data={recipe} updateData={handleFieldChange} />\n          <CurveBtn\n            type=\"submit\"\n            text=\"Publish recipe\"\n            cssClass=\"searchbl-btn mt-6 mb-16 md:mb-24 lg:mb-0 dark:bg-accentMain dark:text-accentDarker  dark:hover:bg-accentLighter dark:focus:bg-accentLighter\"\n          />\n        </form>\n        <div className=\"hidden lg:block w-40 absolute top-0 left-[900px] xl:left-[1056px]\">\n          <h2 className=\"font-main font-semibold text-secondaryText text-customBase mb-10 dark:text-whiteText\">\n            Follow Us\n          </h2>\n          <FollowUs className=\"followus-addrecipe\" />\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Link } from 'react-router-dom';\n\nexport const PopularRecipes = ({ data }) => {\n  return (\n    <div className=\"relative md:w-full lg:w-80 lg:absolute lg:top-[500px] lg:left-[900px] xl:left-[1056px]\">\n      <h2 className=\"mb-2 font-main font-semibold text-secondaryText text-customBase dark:text-whiteText\">\n        Popular recipe\n      </h2>\n      <ul className=\"flex flex-col md:flex-row md:flex-wrap lg:flex-col\">\n        {data.map(({ _id, title, description, thumb }) => (\n          <li\n            key={_id}\n            className=\"flex md:w-1/2 lg:w-full border-b-2 border-gray-300 pb-3.5 pt-6 pr-2 dark:border-gray-500\"\n          >\n            <Link to={`/recipes/${_id}`} className=\"flex\">\n              <img\n                className=\"w-[104px] h-[85px] rounded-md mr-3\"\n                src={thumb}\n                alt={title}\n              />\n              <div className=\"flex flex-col\">\n                <p className=\"text-customSm text-secondaryText font-medium dark:text-whiteText\">\n                  {title}\n                </p>\n                <p className=\"text-xs text-gray-500 font-normal dark:text-gray-400\">\n                  {description}\n                </p>\n              </div>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AddRecipeForm } from 'components/AddRecipe/AddRecipeForm';\nimport { MainPageTitle } from 'components/MainPageTitle/MainPageTitle';\nimport { PopularRecipes } from 'components/PopularRecipes/PopularRecipes';\nimport { fetchPopular } from 'redux/recipes/recipesOperations';\nimport { selectRecipes } from 'redux/recipes/recipesSelectors';\nimport { Helmet } from 'react-helmet-async';\n\nconst AddRecipe = () => {\n  const popular = useSelector(selectRecipes);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchPopular());\n  }, [dispatch]);\n\n  return (\n    <div className=\"container mb-16 md:mb-24 xl:mb-52 relative z-10\">\n      <Helmet>\n        <title>Add new recipe</title>\n      </Helmet>\n      <MainPageTitle\n        pageTitle=\"Add recipe\"\n        className=\"main-title mb-[72px] md:mb-[100px]\"\n      />\n      <AddRecipeForm />\n      {popular.length > 0 ? <PopularRecipes data={popular} /> : <></>}\n    </div>\n  );\n};\n\nexport default AddRecipe;\n","export const selectCategories = state => state.categories.list;\nexport const selectCurrentCategory = state => state.categories.currentCategory;\nexport const selectIngrIsLoading = state => state.categories.isLoading;\nexport const selectIngrError = state => state.categories.error;\n","export const selectRecipes = state => state.recipes.items;\nexport const selectIsLoading = state => state.recipes.isLoading;\nexport const selectError = state => state.recipes.error;\nexport const selectRecipeById = state => state.recipes.recipeById;\nexport const selectNewRecipe = state => state.recipes.newRecipe;\n"],"names":["MainPageTitle","pageTitle","className","isVisible","includes","initial","opacity","viewport","once","transition","duration","delay","whileInView","ResipeDescriptionFields","data","categories","updateData","updateImg","previewImg","htmlFor","src","alt","type","id","name","onChange","accept","placeholder","autoComplete","required","value","title","description","category","disabled","hidden","map","_id","time","timeList","ResipeIngredientsFields","items","updateItems","removeItem","ingredients","useState","matchingIngr","setMatchingIngr","ingredientName","setIngredientName","current","setCurrent","currentAmount","setCurrentAmount","currentMeasure","setCurrentMeasure","handleFieldChange","target","dataset","onInput","currentValue","trim","matchIngredients","filter","it","ttl","toLowerCase","length","onClick","chooseItem","step","min","e","measureList","CurveBtn","text","cssClass","newIgredient","amount","measure","Logo","trash","cssClassIcon","cssClassDiv","ResipeMethodFields","instructions","isPublic","selectIngredients","state","IMG_PREVIEW","initialRecipe","AddRecipeForm","ingredientsList","useSelector","categoriesList","selectCategories","dispatch","useDispatch","navigate","useNavigate","useEffect","getIngredients","getCategories","preview","setPreview","recipe","setRecipe","_recipe","handleIngredientsChange","sendForm","form","formData","addRecipe","resetForm","reset","noValidate","onSubmit","preventDefault","FormData","file","thumb","files","alert","append","formattedRecipe","JSON","stringify","_file","URL","createObjectURL","_ingredients","item","FollowUs","PopularRecipes","to","popular","selectRecipes","fetchPopular","list","selectCurrentCategory","currentCategory","recipes","selectIsLoading","isLoading","selectError","error","selectRecipeById","recipeById"],"sourceRoot":""}